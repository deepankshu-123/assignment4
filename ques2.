// IN-PLACE MANNER
#include <bits/stdc++.h>
using namespace std;
// Function to sort an array using insertion sort
void insertion_Sort(int array[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++)
    {
        key = array[i];
        j = i - 1;
        // Move elements of array[0..i-1], that are greater than key, to one position ahead of their current position
        while (j >= 0 && array[j] > key)
        {
            array[j + 1] = array[j];
            j = j - 1;
        }
        array[j + 1] = key;
    }
}
// A utility function to print an array of size n
void print_Array(int arr[], int n)
{
    int i;
    for (i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}
int main()
{
    int array[] = {23, 43, 45, 76, 98};
    int N = sizeof(array) / sizeof(array[0]);
    insertion_Sort(array, N);
    print_Array(array, N);
    return 0;

    int arr[50], tot, i, j, k, element, index;
    cout << "Enter the Size for Array: ";
    cin >> tot;
    cout << "Enter " << tot << " Array Elements: ";
    for (i = 0; i < tot; i++)
        cin >> array[i];
    for (i = 1; i < tot; i++)
    {
        element = array[i];
        if (element < array[i - 1])
        {
            for (j = 0; j <= i; j++)
            {
                if (element < array[j])
                {
                    index = j;
                    for (k = i; k > j; k--)
                        array[k] = array[k - 1];
                    break;
                }
            }
        }
        else
            continue;
        array[index] = element;
    }
    cout << "\nThe New Array (Sorted Array):\n";
    for (i = 0; i < tot; i++)
        cout << array[i] << " ";
    cout << endl;
    return 0;
}
